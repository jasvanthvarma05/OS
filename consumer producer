#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>

#define BUFFER_SIZE 3

int buffer[BUFFER_SIZE];
int itemCount = 0; // Number of items in the buffer

sem_t full, empty; // Semaphores for full and empty slots in the buffer
pthread_mutex_t mutex; // Mutex for synchronization

void init() {
    sem_init(&empty, 0, BUFFER_SIZE); // Initialize empty slots to buffer size
    sem_init(&full, 0, 0); // Initialize full slots to 0
    pthread_mutex_init(&mutex, NULL); // Initialize mutex
}

void *producer(void *arg) {
    int produced = 0;
    while (produced < 4) {
        sem_wait(&empty); // Wait for an empty slot
        pthread_mutex_lock(&mutex); // Acquire mutex lock

        // Produce item and add to the buffer
        buffer[itemCount++] = produced + 1;
        printf("Produced item %d\n", produced + 1);

        pthread_mutex_unlock(&mutex); // Release mutex lock
        sem_post(&full); // Signal that a slot is filled
        produced++;
    }
    pthread_exit(NULL);
}

void *consumer(void *arg) {
    int consumed = 0;
    while (consumed < 1) {
        sem_wait(&full); // Wait for a filled slot
        pthread_mutex_lock(&mutex); // Acquire mutex lock

        // Consume item from the buffer
        printf("Consumed item %d\n", buffer[0]);
        buffer[0] = 0; // Clear consumed item from buffer
        itemCount--;

        pthread_mutex_unlock(&mutex); // Release mutex lock
        sem_post(&empty); // Signal that a slot is emptied
        consumed++;
    }
    pthread_exit(NULL);
}

int main() {
    pthread_t producer_thread, consumer_thread;

    init(); // Initialize semaphores and mutex

    // Create producer and consumer threads
    pthread_create(&producer_thread, NULL, producer, NULL);
    pthread_create(&consumer_thread, NULL, consumer, NULL);

    // Wait for threads to finish execution
    pthread_join(producer_thread, NULL);
    pthread_join(consumer_thread, NULL);

    return 0;
}
