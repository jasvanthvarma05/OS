#include <stdio.h>
#include <pthread.h>
#include <unistd.h>

#define NUM_PHILOSOPHERS 5

pthread_mutex_t forks[NUM_PHILOSOPHERS];
pthread_t philosophers[NUM_PHILOSOPHERS];

int state[NUM_PHILOSOPHERS];

void *philosopher(void *arg) {
    int id = *((int *) arg);
    int right = id;
    int left = (id + 1) % NUM_PHILOSOPHERS;

    while (1) {
        // Thinking
        printf("Philosopher %d is THINKING.\n", id);
        sleep(1);

        // Hungry
        state[id] = 1;
        printf("Philosopher %d is HUNGRY.\n", id);

        pthread_mutex_lock(&forks[right]);
        pthread_mutex_lock(&forks[left]);

        // Eating
        state[id] = 2;
        printf("Philosopher %d is EATING.\n", id);
        sleep(2);

        pthread_mutex_unlock(&forks[left]);
        pthread_mutex_unlock(&forks[right]);

        // Back to thinking
        state[id] = 0;
    }
}

int main() {
    int i;
    for (i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_init(&forks[i], NULL);
    }

    for (i = 0; i < NUM_PHILOSOPHERS; i++) {
        int *arg = malloc(sizeof(*arg));
        *arg = i;
        pthread_create(&philosophers[i], NULL, philosopher, arg);
    }

    for (i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(philosophers[i], NULL);
    }

    return 0;
}
